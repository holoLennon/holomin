/*
 * zmax 
 * 
 */

package com.zmax.yijian.web.controller.restful.my;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zmax.exception.*;
import com.zmax.yijian.biz.service.my.*;
import com.zmax.yijian.common.conf.Conf;
import com.zmax.yijian.common.dal.bean.*;
import com.zmax.yijian.common.utils.AESUtil;
import com.zmax.yijian.web.controller.restful.*;
import com.zmax.yijian.web.controller.restful.entity.ClientInfo;
import com.zmax.yijian.web.controller.restful.entity.RestPage;
import com.zmax.utils.easyui.Grid;
import com.zmax.utils.page.PageHelper;
import com.zmax.utils.page.Pagination;

/**
 * RestFul控制 
 * 订单
 * 
 *
 */
@Controller
@RequestMapping("/rest/OrderrFinished")
public class OrderrFinishedRestController {
	/** 日志实例 */
	private static final Logger logger = Logger.getLogger(OrderrFinishedRestController.class);

	@Autowired
	OrderrFinishedService orderrFinishedService;
	@Autowired
	RestUtils restUtils;
	@Autowired
	RestSpecUtils restSpecUtils;
	/**
	 *  查询获取列表
	 * @param request
	 * @param clientInfo 客户端信息
	 * @param restPage 页面信息
	 * @return List<OrderrFinished>
	 * @throws BoException 可以显示给客户的错
	 * @throws NeedLoginException 没登录
	 * @throws Exception 内部错
	 */
	@RequestMapping(value = "/query", method = RequestMethod.GET)
	@ResponseBody
	public List<OrderrFinished> query(HttpServletRequest request,ClientInfo clientInfo,RestPage restPage) throws BoException, NeedLoginException, RightException, Exception {
		restPage.fix();
		User tokenUser=restUtils.checkAccessToken(clientInfo, restPage,new OrderrFinished(),"query");

		List<OrderrFinished> list=new ArrayList<OrderrFinished>();
		PageHelper ph=new PageHelper(restPage.getPageNo(), restPage.getPageSize());
		ph.setSort(restPage.getOrderstr());
		restSpecUtils.queryBefore(request, clientInfo, restPage, tokenUser, "OrderrFinished", ph);
		Grid page = orderrFinishedService.csgrid(tokenUser, null, ph, restPage.getWhere(), true, true);
		list=(List<OrderrFinished>)page.getRows();
		for (OrderrFinished orderrFinished : list) {
			orderrFinishedService.addObj(null, orderrFinished);
		}
		restSpecUtils.queryAfter(request, clientInfo, restPage, tokenUser, "OrderrFinished", ph, list);
		return list;
	}
	/**
	 * 获取一个新对象，加上各种LIST让用户选择
	 * @param request
	 * @param clientInfo 客户端信息
	 * @param restPage 页面信息
	 * @param orderrFinished 给的默认值，可以为空
	 * @return OrderrFinished
	 * @throws BoException 可以显示给客户的错
	 * @throws NeedLoginException 没登录
	 * @throws Exception 内部错
	 */
	@RequestMapping(value = "/getnew", method = RequestMethod.GET)
	@ResponseBody
	public OrderrFinished getnew(HttpServletRequest request,ClientInfo clientInfo,RestPage restPage,OrderrFinished orderrFinished) throws BoException, NeedLoginException, RightException, Exception {
		if(orderrFinished==null)
			orderrFinished=new OrderrFinished();
		User tokenUser=restUtils.checkAccessToken(clientInfo, restPage, orderrFinished,"new");
		orderrFinished=orderrFinishedService.csnewget(tokenUser, orderrFinished, null, null, true, true);
		return orderrFinished;
	}
	/**
	 * 新对象提交
	 * @param request
	 * @param clientInfo
	 * @param restPage 页面信息
	 * @param orderrFinished 页面提交的对象
	 * @return OrderrFinished
	 * @throws BoException 可以显示给客户的错
	 * @throws NeedLoginException 没登录
	 * @throws Exception 内部错
	 */
	@RequestMapping(value = "/create", method = RequestMethod.POST)
	@ResponseBody
	public OrderrFinished create(HttpServletRequest request,ClientInfo clientInfo,RestPage restPage,OrderrFinished orderrFinished) throws BoException, NeedLoginException, RightException, Exception {
		User tokenUser=restUtils.checkAccessToken(clientInfo, restPage, orderrFinished,"create");
		restSpecUtils.createBefore(request, clientInfo, restPage, tokenUser, orderrFinished);
		orderrFinishedService.saveCreate(tokenUser,new OrderrFinished(),orderrFinished, null, null, true, true);
		restSpecUtils.createAfter(request, clientInfo, restPage, tokenUser, orderrFinished);
		return orderrFinished;
	}
	/**
	 * 获取对象
	 * @param request
	 * @param clientInfo 客户端信息
	 * @param restPage 页面信息
	 * @param id
	 * @return OrderrFinished
	 * @throws BoException 可以显示给客户的错
	 * @throws NeedLoginException 没登录
	 * @throws Exception 内部错
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	@ResponseBody
	public OrderrFinished get(HttpServletRequest request,ClientInfo clientInfo,RestPage restPage,@PathVariable Integer id) throws BoException, NeedLoginException, RightException, Exception {
		if(id==null || id.toString().equals("0")){
			return getnew(request, clientInfo, restPage, null);
		}
		User tokenUser=restUtils.checkAccessToken(clientInfo, restPage, new OrderrFinished(),"get");
		restSpecUtils.ggetBefore(request, clientInfo, restPage, tokenUser, "OrderrFinished", id);
		OrderrFinished orderrFinished=orderrFinishedService.csshow(tokenUser, id, true, true);
		restSpecUtils.ggetAfter(request, clientInfo, restPage, tokenUser, orderrFinished);
		return orderrFinished;
	}
	/**
	 * 获取对象Edit版
	 * @param request
	 * @param clientInfo 客户端信息
	 * @param restPage 页面信息
	 * @param id
	 * @return OrderrFinished
	 * @throws BoException 可以显示给客户的错
	 * @throws NeedLoginException 没登录
	 * @throws Exception 内部错
	 */
	@RequestMapping(value = "/getedit/{id}", method = RequestMethod.GET)
	@ResponseBody
	public OrderrFinished getedit(HttpServletRequest request,ClientInfo clientInfo,RestPage restPage,@PathVariable Integer id) throws BoException, NeedLoginException, RightException, Exception {
		User tokenUser=restUtils.checkAccessToken(clientInfo, restPage, new OrderrFinished(),"get");
		restSpecUtils.ggeteditBefore(request, clientInfo, restPage, tokenUser, "OrderrFinished", id);
		OrderrFinished orderrFinished=orderrFinishedService.csedit(tokenUser, id, true, true);
		restSpecUtils.ggeteditAfter(request, clientInfo, restPage, tokenUser, orderrFinished);
		return orderrFinished;
	}
	/**
	 * 提交更新
	 * @param request
	 * @param clientInfo 客户端信息
	 * @param restPage 页面信息
	 * @param orderrFinished
	 * @return OrderrFinished
	 * @throws BoException 可以显示给客户的错
	 * @throws NeedLoginException 没登录
	 * @throws Exception 内部错
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST) 
	@ResponseBody
	public OrderrFinished update(HttpServletRequest request,ClientInfo clientInfo,RestPage restPage,OrderrFinished orderrFinished) throws BoException, NeedLoginException, RightException, Exception {
		User tokenUser=restUtils.checkAccessToken(clientInfo, restPage, new OrderrFinished(),"update");
		restSpecUtils.updateBefore(request, clientInfo, restPage, tokenUser, orderrFinished);
		orderrFinishedService.updateUpdate(tokenUser, orderrFinished, orderrFinished.getId(), true, true);
		orderrFinishedService.addList(tokenUser,orderrFinished);
		orderrFinishedService.addString(tokenUser,orderrFinished);	
		restSpecUtils.updateAfter(request, clientInfo, restPage, tokenUser, orderrFinished);
		return orderrFinished;
	}
	/**
	 * 删除对象
	 * @param request
	 * @param clientInfo 客户端信息
	 * @param restPage 页面信息
	 * @param id
	 * @return Boolean
	 * @throws BoException 可以显示给客户的错
	 * @throws NeedLoginException 没登录
	 * @throws Exception 内部错
	 */
	@RequestMapping(value = "/del/{id}", method = RequestMethod.GET)
	@ResponseBody
	public Boolean del(HttpServletRequest request,ClientInfo clientInfo,RestPage restPage,@PathVariable Integer id) throws BoException, NeedLoginException, RightException, Exception {
		User tokenUser=restUtils.checkAccessToken(clientInfo, restPage, new OrderrFinished(),"del");
		Boolean ret=orderrFinishedService.deleteById(tokenUser, id);
		return ret;
	}
}
