package com.zmax.yijian.biz.service.common;
/**
 * 权限检查工具
 */
import groovy.lang.GroovyShell;
import groovy.lang.Script;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.zmax.conf.AttrStatic;
import com.zmax.conf.SessionName;
import com.zmax.utils.clazz.ClassUtils;
import com.zmax.utils.string.StringUtilz;
import com.zmax.yijian.biz.service.my.*;
import com.zmax.yijian.common.dal.bean.*;
import com.zmax.exception.*;



/**
 * Session和Db关于User读写
 * @author zmax
 *
 */

@Component
public class SessionUserUtils {
	/**日志实例*/
	private static final Logger logger = Logger.getLogger(SessionUserUtils.class);
	/**关键字之给其它系统用的用户登录，传参版，内容是&userType=1&userId=2&hm=a12b34*/
	public static String keyUUHM="uuhm";
	
	@Autowired
	UserService userService;
	@Autowired
	AdminService adminService;
	@Autowired
	CadminService cadminService;
	@Autowired
	OperService operService;
	@Autowired
	MemberService memberService;
	@Autowired
	ManufacturerService manufacturerService;
	
	/**
	 * 从Request.Session中获取User并且检查用户类型，如果不存在，抛出没有登录的错
	 * @param request
	 * @param clazz ex.Member.class
	 * @return
	 * @throws NeedLoginException 抛出没有登录的错
	 */
	public User userFromRequestWithException(HttpServletRequest request,Class clazz) throws NeedLoginException{
		HttpSession session=(request==null)?null:request.getSession();
		if(session==null)
			throw new NeedLoginException();
		if(session.getAttribute(SessionName.user)==null)
			throw new NeedLoginException();
		User user=(User)session.getAttribute(SessionName.user);
		if(user.getUserobj()==null)
			return null;
		if(user.getUserobj().getClass().equals(clazz))
			return user;
		
		return null;
	}
	/**
	 * 从Request.Session中获取User 如果不存在，抛出没有登录的错
	 * @param request
	 * @return
	 */
	public User userFromRequestWithException(HttpServletRequest request) throws NeedLoginException{
		HttpSession session=(request==null)?null:request.getSession();
		if(session==null)
			throw new NeedLoginException();
		if(session.getAttribute(SessionName.user)==null)
			throw new NeedLoginException();
		return (User)session.getAttribute(SessionName.user);
	}
	/**
	 * 从Request.Session中获取User 如果不存在，不抛错，返回空
	 * @param request
	 * @return
	 */
	public User userFromRequest(HttpServletRequest request){
		HttpSession session=(request==null)?null:request.getSession();
		if(session==null)
			return null;
		if(session.getAttribute(SessionName.user)==null)
			return null;
		return (User)session.getAttribute(SessionName.user);
	}
	/**
	 * 从Request.Session中获取User.userObj
	 * @param request
	 * @return
	 */
	public Object userObjFromRequest(HttpServletRequest request){
		HttpSession session=(request==null)?null:request.getSession();
		if(session==null)
			return null;
		if(session.getAttribute(SessionName.user)==null)
			return null;
		User user=(User)session.getAttribute(SessionName.user);
		return user.getUserobj();
	}
	/**
	 * 从Request.Session中获取Member
	 * @param request
	 * @return
	 */
	public Member memberFromRequest(HttpServletRequest request){
		User sessionUser=userFromRequest(request);
		return memberFromRequest(sessionUser);
	}
	/**
	 * 从Request.Session中获取Member
	 * @param request
	 * @return
	 */
	public Member memberFromRequest(User sessionUser){
		if(sessionUser==null)
			return null;
		if(sessionUser.getUserobj() instanceof Member)
			return (Member)(sessionUser.getUserobj());
		return null;
	}
	/**
	 * 从Request.Session中获取Cadmin
	 * @param request
	 * @return
	 */
	public Cadmin cadminFromRequest(HttpServletRequest request){
		User sessionUser=userFromRequest(request);
		return cadminFromRequest(sessionUser);
	}
	/**
	 * 从Request.Session中获取Cadmin
	 * @param request
	 * @return
	 */
	public Cadmin cadminFromRequest(User sessionUser){
		if(sessionUser==null)
			return null;
		if(sessionUser.getUserobj() instanceof Cadmin)
			return (Cadmin)(sessionUser.getUserobj());
		return null;
	}
	/**
	 * 从Request.Session中获取Oper
	 * @param request
	 * @return
	 */
	public Oper operFromRequest(HttpServletRequest request){
		User sessionUser=userFromRequest(request);
		return operFromRequest(sessionUser);
	}
	/**
	 * 从Request.Session中获取Oper
	 * @param request
	 * @return
	 */
	public Oper operFromRequest(User sessionUser){
		if(sessionUser==null)
			return null;
		if(sessionUser.getUserobj() instanceof Oper)
			return (Oper)(sessionUser.getUserobj());
		return null;
	}


	/**
	 * 把MEMBER保存到数据库中，同时更新session
	 * @param request
	 * @param me
	 */
	public void saveMemberMe(HttpServletRequest request,Member me){
		User sessionUser=userFromRequest(request);
		Member dbme=memberService.get(sessionUser, me.getId());
		ClassUtils.beanDeepCopySkipEmpty(me, dbme);
		memberService.update(sessionUser, dbme);
		sessionUser.setUserobj(dbme);
	}


	/**
	 * 把Oper保存到数据库中，同时更新session
	 * @param request
	 * @param me
	 */
	public  void saveOperMe(HttpServletRequest request,Oper me){
		User sessionUser=userFromRequest(request);
		Oper dbme=operService.get(sessionUser, me.getId());
		ClassUtils.beanDeepCopySkipEmpty(me, dbme);
		operService.update(sessionUser, dbme);
		sessionUser.setUserobj(dbme);
	}

	/**
	 * 把Cadmin保存到数据库中，同时更新session
	 * @param request
	 * @param me
	 */
	public  void saveCadminMe(HttpServletRequest request,Cadmin me){
		User sessionUser=userFromRequest(request);
		Cadmin dbme=cadminService.get(sessionUser, me.getId());
		ClassUtils.beanDeepCopySkipEmpty(me, dbme);
		cadminService.update(sessionUser, dbme);
		sessionUser.setUserobj(dbme);
	}

	/**
	 * 把User保存到数据库中，同时更新session
	 * @param request
	 * @param me
	 */
	public  void saveUserMe(HttpServletRequest request,User me){
		User sessionUser=userFromRequest(request);
		User dbme=userService.get(sessionUser, me.getId());
		ClassUtils.beanDeepCopySkipEmpty(me, dbme);
		userService.update(sessionUser, dbme);
		sessionUser.setUserobj(dbme);
	}
	


	/**Session中的userObjMap的key的分隔符*/
	static String sessionMapKeySplit="^";
	/**
	 * 根据关键字从session中获取相应的用户所拥有的对象
	 * 如果user不存在，可能是session过期了，或者还没登录，抛错
	 * 如果不存在，则到表里去取一下
	 * 如果还不存在，则返回null
	 * @param request
	 * @param key 关键字 ex.bomember
	 * @param bizId 所属商家id
	 * @return
	 * @throws NeedLoginException
	 * @throws Exception
	 */
	public Object takeUserObjmap(HttpServletRequest request,String key,Integer bizId) throws NeedLoginException,Exception{
		User sessionUser=userFromRequest(request);
		if(sessionUser==null) 
			throw new NeedLoginException("用户不存在，可能是session过期了");
		if(sessionUser.getObjmap()==null)
			sessionUser.setObjmap(new HashMap<String, Object>());
		String realkey=key+sessionMapKeySplit+bizId;
		Object obj=sessionUser.getObjmap().get(realkey);
		if(obj!=null)
			return obj;
		return null;
	}

	/**
	 * 从表中获取数据更新session
	 * 这个是用于并发安全，配合xxxService xxxDao executeHql(update xxx)之后的工作
	 * @param request
	 * @param key 关键字 ex.bomember
	 * @param bizId 所属商家id
	 * @return
	 * @throws NeedLoginException 需要登录
	 * @throws Exception 数据不存在
	 */
	public Object refreshUserObjmapFromTb(HttpServletRequest request,String key,Integer bizId) throws NeedLoginException,Exception{
		User sessionUser=userFromRequest(request);
		if(sessionUser==null) 
			throw new NeedLoginException("用户不存在，可能是session过期了");
		if(sessionUser.getObjmap()==null)
			sessionUser.setObjmap(new HashMap<String, Object>());
		String realkey=key+sessionMapKeySplit+bizId;
		return null;
	}
	/**
	 * 更新session的objmap,同时保存到表中，如果涉及到金额的时候，不要用这个函数，此函数为非并发安全函数
	 * @param request
	 * @param key 关键字 ex.bomember
	 * @param bizId 所属商家id
	 * @param obj 需要保存的对象
	 * @param isSaveDb boolean 是不是要保存到数据库
	 * @throws NeedLoginException
	 * @throws Exception
	 */
	public void saveUserObjmap(HttpServletRequest request,String key,Integer bizId,Object obj,Boolean isSaveDb) throws NeedLoginException,Exception{
		if(StringUtils.isBlank(key)||obj==null) 
			throw new Exception("传入对象为空");
		User sessionUser=userFromRequest(request);
		if(sessionUser==null) 
			throw new NeedLoginException("用户不存在，可能是session过期了");
		if(sessionUser.getObjmap()==null)
			sessionUser.setObjmap(new HashMap<String, Object>());
		String realkey=key+sessionMapKeySplit+bizId;

		//保存到session
		sessionUser.getObjmap().put(realkey, obj);
		isSaveDb=(isSaveDb==null)?false:isSaveDb;
		if(!isSaveDb)
			return;
		//存到表
	}
}
