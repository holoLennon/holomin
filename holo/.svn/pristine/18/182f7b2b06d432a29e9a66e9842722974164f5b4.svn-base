package com.zmax.yijian.biz.service.common;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.sun.istack.internal.logging.Logger;
import com.zmax.conf.AttrStatic;
import com.zmax.entity.QueryHelper;
import com.zmax.exception.BoException;
import com.zmax.utils.clazz.ClassUtils;
import com.zmax.utils.easyui.Grid;
import com.zmax.utils.page.Pagination;
import com.zmax.utils.string.StringUtilz;
import com.zmax.yijian.biz.service.my.AdminService;
import com.zmax.yijian.biz.service.my.AlipayPaynotifyService;
import com.zmax.yijian.biz.service.my.CadminService;
import com.zmax.yijian.biz.service.my.DmmsgService;
import com.zmax.yijian.biz.service.my.DoctorProductService;
import com.zmax.yijian.biz.service.my.DoctorService;
import com.zmax.yijian.biz.service.my.DruggistService;
import com.zmax.yijian.biz.service.my.DrugstoreService;
import com.zmax.yijian.biz.service.my.HospitalService;
import com.zmax.yijian.biz.service.my.ManufacturerService;
import com.zmax.yijian.biz.service.my.MemberService;
import com.zmax.yijian.biz.service.my.MemberdoctorService;
import com.zmax.yijian.biz.service.my.MyisoService;
import com.zmax.yijian.biz.service.my.MyisouService;
import com.zmax.yijian.biz.service.my.OperLogService;
import com.zmax.yijian.biz.service.my.OperService;
import com.zmax.yijian.biz.service.my.PermitfieldService;
import com.zmax.yijian.biz.service.my.PermittableService;
import com.zmax.yijian.biz.service.my.ProductExtTxtService;
import com.zmax.yijian.biz.service.my.ProductService;
import com.zmax.yijian.biz.service.my.ProductTypeLinkProductService;
import com.zmax.yijian.biz.service.my.ProductTypeService;
import com.zmax.yijian.biz.service.my.ProductchannelService;
import com.zmax.yijian.biz.service.my.SellerCountService;
import com.zmax.yijian.biz.service.my.SellerService;
import com.zmax.yijian.biz.service.my.SuggestionService;
import com.zmax.yijian.biz.service.my.TbfieldService;
import com.zmax.yijian.biz.service.my.UserService;
import com.zmax.yijian.biz.service.my.WaCustomAudParamService;
import com.zmax.yijian.biz.service.my.WaEntityArticleService;
import com.zmax.yijian.biz.service.my.WaGeneralNoticeRetService;
import com.zmax.yijian.biz.service.my.WaQradvService;
import com.zmax.yijian.biz.service.my.WaQrcodeticketSceneService;
import com.zmax.yijian.biz.service.my.WaRecvmsgService;
import com.zmax.yijian.biz.service.my.WaTemplateAddService;
import com.zmax.yijian.biz.service.my.WebsetService;
import com.zmax.yijian.biz.service.my.WxUsergroupService;
import com.zmax.yijian.biz.service.my.WxcfgService;
import com.zmax.yijian.biz.service.my.WxmenuService;
import com.zmax.yijian.biz.service.my.WxmsgtemplateService;
import com.zmax.yijian.biz.service.my.WxouserService;
import com.zmax.yijian.biz.service.my.WxousersubscribehisService;
import com.zmax.yijian.biz.service.my.WxrService;
import com.zmax.yijian.biz.service.spec.SpecRelationService;
import com.zmax.yijian.biz.service.spec.SpecRoleService;
import com.zmax.yijian.biz.service.spec.SpecUserService;
import com.zmax.yijian.common.dal.bean.Member;
import com.zmax.yijian.common.dal.bean.Memberdoctor;
import com.zmax.yijian.common.dal.bean.Orderr;
import com.zmax.yijian.common.dal.bean.User;
import com.zmax.yijian.common.dal.bean.Wxouser;
import com.zmax.yijian.common.dal.bean.Wxr;



/**
 * 在Controller中GET/POST时
 * 额外的Bean补全增加之通用版
 * @author zmax
 *
 */
@Component
public class CommonzSvrUitlsSpec {
	static int LISTMAX=1000;
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	@Autowired
	AlipayPaynotifyService alipayPaynotifyService;
	@Autowired
	MemberdoctorService memberdoctorService;
	@Autowired
	DoctorProductService doctorProductService;
	@Autowired
	DmmsgService dmmsgService;
	@Autowired
	DrugstoreService drugstoreService;
	@Autowired
	SellerCountService sellerCountService;
	@Autowired
	HospitalService hospitalService;
	@Autowired
	WaEntityArticleService waEntityArticleService;
	@Autowired
	WxmenuService wxmenuService;
	@Autowired
	WaRecvmsgService waRecvmsgService;
	@Autowired
	WaCustomAudParamService waCustomAudParamService;
	@Autowired
	WxmsgtemplateService wxmsgtemplateService;
	@Autowired
	WaTemplateAddService waTemplateAddService;
	@Autowired
	WxUsergroupService wxUsergroupService;
	@Autowired
	WaGeneralNoticeRetService waGeneralNoticeRetService;
	@Autowired
	TbfieldService tbfieldService;
	@Autowired
	WebsetService websetService;
	@Autowired
	MyisoService myisoService;
	@Autowired
	MyisouService myisouService;
	@Autowired
	OperLogService operLogService;
	@Autowired
	PermittableService permittableService;
	@Autowired
	PermitfieldService permitfieldService;
	@Autowired
	WxcfgService wxcfgService;
	@Autowired
	WxrService wxrService;
	@Autowired
	WxouserService wxouserService;
	@Autowired
	WxousersubscribehisService wxousersubscribehisService;
	@Autowired
	WaQrcodeticketSceneService waQrcodeticketSceneService;
	@Autowired
	WaQradvService waQradvService;
	@Autowired
	ProductService productService;
	@Autowired
	ProductExtTxtService productExtTxtService;
	@Autowired
	ProductchannelService productchannelService;
	@Autowired
	ManufacturerService manufacturerService;
	@Autowired
	ProductTypeService productTypeService;
	@Autowired
	ProductTypeLinkProductService productTypeLinkProductService;
	@Autowired
	SuggestionService suggestionService;

	@Autowired
	UserService userService;
	@Autowired
	AdminService adminService;
	@Autowired
	CadminService cadminService;
	@Autowired
	OperService operService;
	@Autowired
	MemberService memberService;
	@Autowired
	DoctorService doctorService;
	@Autowired
	DruggistService druggistService;
	@Autowired
	SellerService sellerService;


	@Autowired
	PermitCheckUtils permitCheckUtils;
	@Autowired
	SessionUserUtils sessionUserUtils;
	@Autowired
	SpecUserService specUserService;
	@Autowired
	SpecRoleService specRoleService;
	@Autowired
	SpecRelationService specRelationService;

	public CommonzSvrUitlsSpec(){
	}

	/**
	 * 返回导出excel需要的Hql
	 * @param sessionUser
	 * @param classname
	 * @param queryhq
	 * @param params
	 * @return hql
	 */
	public String makeExportExcelQuery(User sessionUser,String classname, String queryhq, String act ,List<Object> params){
		return "";
	}	
	/**
	 * 根据搜索对象产生where
	 * @param request
	 * @param response
	 * @param model
	 * @param search
	 * @param queryhq
	 * @param params
	 */
	public String makeWhere(User sessionUser,Object search, String queryhq ,List<Object> params)throws BoException,Exception{
		if(search==null)
			return "";
		//如果是操作员在药方列表页中，没有GRID，只能是搜索query= id=n得到结果
		if(sessionUser!=null&&sessionUser.getRoleId().intValue()==AttrStatic.ROLE_OPER&&search instanceof Orderr){
			if(StringUtils.isBlank(queryhq))
				throw new BoException("请在搜索框中输入编号");
			String s=queryhq.split("%")[1]; //0=1 or id like '%"+value+"%'
			return "sn="+s;
		}
		return "";
	}
	/**
	 * 为ListWithTree创建QueryHelper,包含where order
	 * @param sessionUser
	 * @param classname
	 * @param queryHelper
	 * @return
	 */
	public void makeWhereForListWithTree(User sessionUser,String classname,QueryHelper queryHelper){

	}
	/**
	 * index的补全
	 * @param request
	 * @param response
	 * @param model
	 * @param obj
	 */
	public void indexAfter(User sessionUser,Object obj){

	}
	/**
	 * 列表前的补全
	 * @param obj
	 */
	public void gridBefore(User sessionUser,Object obj){
	}	
	/**
	 * index时补全bean，只需要显示父母或属性对象的文本信息即可
	 * @param obj
	 */
	public void gridAfter(User sessionUser,List list){

	}

	/**
	 * index时的单条补全bean，只需要显示父母或属性对象的文本信息即可
	 * @param obj
	 */
	public void gridOneAfter(User sessionUser,Object obj){
	}
	/**
	 * 给表格加脚 
	 * grid.setFooter(new ArrayList());
	 * grid.getFooter().add(统计obj);
	 * @param sessionUser
	 * @param grid
	 * @param obj
	 * @param where
	 */
	public void csgridAfterFooter(User sessionUser,Grid grid,Object obj,String where){
	}
	/**
	 * show时补全bean，显示父母或属性对象+扩展
	 * @param obj
	 */
	public void show(User sessionUser,Object obj){

	}
	/**
	 * new get前进行判断
	 * @param obj
	 */
	public void newgetBefore(User sessionUser,Object obj) throws Exception{

	}
	/**
	 * new get时补全bean:加上各类的LIST
	 * @param obj
	 */
	public void newgetAfter(User sessionUser,Object obj) throws Exception{

	}



	/**
	 * 批量更新之前
	 * @param className 类名
	 * @param setfield 设置的字段
	 * @param ids id们
	 * @param request
	 * @param response
	 */
	public void batchupdateBefore(User sessionUser,String className,String setfield,Object[] ids) throws Exception{

	}
	/**
	 * 批量更新之后
	 * @param className 类名
	 * @param setfield 设置的字段
	 * @param ids id们
	 * @param request
	 * @param response
	 */
	public void batchupdateAfter(User sessionUser,String className,String setfield,Object[] ids) throws Exception{
	}	
	/**
	 * 删除ById,写库前
	 * @param className 类名
	 * @param id
	 * @param request
	 * @param response
	 */
	public void deleteByIdBefore(User sessionUser,String className,Object id){
	}
	/**
	 * 删除ById，写库后
	 * @param className 类名
	 * @param id
	 * @param request
	 * @param response
	 */
	public void deleteByIdAfter(User sessionUser,String className,Object id){
	}	
	/**
	 * 生成静态做的事
	 * @param obj
	 * @param pagination
	 * @param request
	 * @param response
	 */
	public void genFirst(User sessionUser,Object obj,Pagination pagination){
	}
	/**
	 * 生成静态做的事
	 * @param obj
	 * @param pagination
	 * @param request
	 * @param response
	 */
	public void genChannel(User sessionUser,Object obj,Pagination pagination){
	}
	/**
	 * 生成静态做的事
	 * @param obj
	 * @param pagination
	 * @param request
	 * @param response
	 */
	public void genContent(User sessionUser,Object obj,Pagination pagination){
	}	
	/**
	 * Edit Get时做的判断
	 * @param obj
	 */
	public void editBefore (User sessionUser,Object obj) throws Exception{

	}



	/**
	 * Edit Get时补全bean，加父母对象用于显示，加父母LIST用于select
	 * @param obj
	 */
	public void editAfter(User sessionUser,Object obj){

	}


	/**
	 * create update 共用
	 * 创建更新，写表前，如计算总价之类，通常都是一样的操作
	 * @param simb 标记 create or update
	 * @param oldobj 新增时是个新对象，修改时是用户提交对象
	 * @param obj 新增时这个是用户提交的obj，修改时这个是从db取出并且被放了新值的数据，数据库保存这个
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	public void createAndUpdateBefore(String simb,Object oldobj,Object obj,User sessionUser) throws Exception{
		if(obj==null)return;
		HttpSession session=null; //这里不要查session
		//create update 共用

		//create 独有
		if("create".equals(simb)){
			if(obj instanceof Orderr){
				((Orderr)obj).setSn((new Date()).getTime());
			}
		}
		//update 独有
		if("update".equals(simb)){

		}
	}	
	/**
	 * create update 共用
	 * 创建更新，写表后，有可能要改变其它表，或本表的其它数据，通常都是一样的操作
	 * @param simb 标记 create or update
	 * @param obj 这个是用户提交的obj已经存到db的数据
	 * @param olddbobj update更新时是复制过的数据库老对象，create创建时是个new Object()
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	public void createAndUpdateAfter(String simb,Object obj,Object olddbobj,User sessionUser) throws BoException, Exception{
		if(obj==null)return;
		HttpSession session=null; //这里不要查session
		//create update 共用
		//微信用户
		if(obj instanceof Wxouser){
			Wxouser wxouser=(Wxouser)obj;
			//wxr是wxouser的扩展
			Wxr wxr=wxrService.get(null,wxouser.getId());
			if(wxr==null){
				wxr=new Wxr(wxouser.getId());
				wxrService.save(wxr);
			}
			//如果有绑定USERID，则user表也去改下,wxr也改下
			if(!StringUtilz.integerNullOr0(wxouser.getUserId())){
				User user=userService.get(null, wxouser.getUserId());
				if(user!=null){
					user.setOpenid(wxouser.getId());
					userService.update(null, user);
				}
				//如果是医生，并且没业务员，去和业务员建立关系
				if(AttrStatic.ROLE_DOCTOR==user.getRoleId().intValue())
					specRelationService.doctor1sSeller(user);
				//如果是患者，去和医生建立关系（包括首推与非首推）
				if(AttrStatic.ROLE_MEMBER==user.getRoleId().intValue())
					specRelationService.member1sDoctorReg(user);
				//填充userId
				wxr.setUserId(wxouser.getUserId());
				wxrService.saveCreate(null, new Wxr(), wxr, null, null, true,true);
			}
		}
		//医患关系
		if(obj instanceof Memberdoctor){
			Memberdoctor memberdoctor=(Memberdoctor)obj;
			//患者的第一次，医生成为患者首推医生
			if(null==memberdoctorService.getFirst(null, null, "memberId=?", null, new Object[]{memberdoctor.getMemberId()})){
				memberService.executeHql(null, "update Member set doctorId=? where id=?", new Object[]{memberdoctor.getDoctorId(),memberdoctor.getMemberId()});
			}

		}
		//create 独有
		if("create".equals(simb)){
			if(obj instanceof User){
				specUserService.createDbAfterUser0((User)obj);
				specUserService.createDbAfterUser1((User)obj);
			}
		}
		//update 独有
		if("update".equals(simb)){
			if(obj instanceof Member){
				specUserService.updateMember((Member)obj);
			}
		}
	}	
	/**
	 * 加上对象，主要用于显示，如果关联表了，hibernate会自动做
	 * @param obj
	 * @param request
	 * @param response
	 * @param model
	 * @param map
	 */
	public void addObj(User sessionUser,Object obj) throws BoException,Exception{
		if(obj instanceof User){
			specRoleService.userAddRoleobj((User)obj);
		}

	}
	/**
	 * 加上多语言对象
	 * @param obj
	 * @param request
	 * @param response
	 * @param model
	 */
	public void addLangObj(User sessionUser,Object obj){
	}	
	/**
	 * 加上文本，用于显示
	 * @param obj
	 */
	public void addString(User sessionUser,Object obj){

	}


	/**
	 * 加上父母或引用的名称LIST，用于select选择，放在对象中。
	 * <br/>list名的规范是:字段名_list
	 * @param obj
	 */
	public void addList(User sessionUser,Object obj){

	}

	/**
	 * 加上扩展
	 * @param obj
	 * @param request
	 * @param response
	 * @param model
	 */
	public void addExt(User sessionUser,Object obj){


	}
	/**
	 * 加上属性
	 * @param obj
	 * @param request
	 * @param response
	 * @param model
	 */
	public void addProp(User sessionUser,Object obj){

	}
	/**
	 * 对象复制
	 * @param request
	 * @param response
	 * @param model
	 * @param src
	 * @param dest
	 */
	public void obj2obj(User sessionUser,Object src,Object dest,String from,String to)throws Exception{
		ClassUtils.beanDeepCopySkipEmpty(src, dest);
	}	
	/**
	 * 对象复制后，保存前的检查
	 * @param request
	 * @param response
	 * @param model
	 * @param src
	 * @param dest
	 * @return
	 */
	public void obj2objcheck(User sessionUser,Object src,Object dest,String from,String to)throws Exception{

	}	
	/**
	 * 完成前，对象集复制成完成对象集后，需要做的事。
	 * 流程:对象集复制成完成对象集，完成表添加，原表删除。 
	 * @param sessionUser
	 * @param obj 已经是xxxFinished对象了
	 * @param finishWhere 条件
	 */
	public void finishBefore(User sessionUser,Object obj,String finishWhere){


	}
	/**
	 * 默认的finish的hql
	 * @param classname
	 * @return
	 */
	public String defaultFinishHql(String classname){
		return "1=0";
	}
	/**
	 * 返回自定义html
	 * @param request 
	 * @param sessionUser User
	 * @param ret 标准返回 ex. /user/User/index
	 * @param clazz 类名 ex.User
	 * @param act 操作 ex.index/show/new/edit/editGetEmpty
	 * @return
	 */
	public String changeHtml(HttpServletRequest request,User sessionUser,String ret,String clazz,String act){
		if(sessionUser!=null && sessionUser.getRoleId()!=null && sessionUser.getRoleId().intValue()==AttrStatic.ROLE_OPER){
			//操作员
			if("Orderr".equals(clazz) ){
				//订单
				if("index".equals(act)){
					//首页
					return "/oper/Orderr/index";
				}
				if("show".equals(act)){
					//查看
					return "/oper/Orderr/show";
				}
			}
			if("Orderrdetail".equals(clazz) ){
				//订单详细
				if("index".equals(act)){
					//首页
					return "/oper/Orderrdetail/index";
				}
				if("show".equals(act)){
					//查看
					return "/oper/Orderrdetail/show";
				}
			}
			if("Drugstore".equals(clazz) ){
				//实体药店
				if("index".equals(act)){
					//首页
					return "/oper/Drugstore/index";
				}
				if("show".equals(act)){
					//查看
					return "/oper/Drugstore/show";
				}
				if("edit".equals(act)){
					//修改
					return "/oper/Drugstore/edit";
				}
			}
		}
		return ret;
	}
}