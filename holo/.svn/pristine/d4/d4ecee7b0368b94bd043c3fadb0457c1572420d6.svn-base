/*
 * zmax 
 * 
 */


//  
package com.zmax.yijian.common.dal.bean;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.*;
import javax.validation.constraints.*;
import org.hibernate.validator.constraints.*;
import javax.persistence.Entity;
import com.zmax.utils.string.JsonUtilAli;

import org.apache.commons.lang.builder.*;
import java.text.*;
import java.util.*;
import com.zmax.yijian.common.dal.bean.base.BaseEntity;


/**
 * 医院
 * @author zmax
 * @version 1.0
 * @since 
 */

@Entity
@Table(name = "hospital")
@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)//可读可写
public class Hospital extends BaseEntity{
	
	//alias
	public static final String TABLE_ALIAS = "医院";

	//date formats
	
	//columns START
	/**序号ID Integer   */
	@Max(99999999999L)
	
	private Integer id;
	/**地区 Integer   */
	@Max(99999999999L)
	
	private Integer areaid;
	/**名称 String   */
	@Length(max=100)
	
	private String cname;
	/**地址 String   */
	@Length(max=100)
	
	private String addr;
	//columns END
	/**
	 * 设置默认值
	 * @param _this
	 */
	public void makedefault(Hospital _this){
	}
	public Hospital(){
		makedefault(this);
	}
	public Hospital(Integer _id){
		this.id=_id;
		makedefault(this);
	}
	/**
	 * 精简版构造，在创建提交数据库时应该使用saveCreate
	 * @param areaid Integer 地区   
	 * @param cname String 名称   
	 * @param addr String 地址   
	* @param notuse String 没用
	 */
	public Hospital(Integer areaid ,String cname ,String addr ,String notuse) {
		super();
		this.areaid = areaid;
		this.cname = cname;
		this.addr = addr;
	}
	/**
	 * 不包括自动变量的构造
	 * @param id Integer 序号ID   
	 * @param areaid Integer 地区   
	 * @param cname String 名称   
	 * @param addr String 地址   
	* @param notuse String 没用
	 */
	public Hospital(Integer id ,Integer areaid ,String cname ,String addr ,String notuse) {
		super();
		this.id = id;
		this.areaid = areaid;
		this.cname = cname;
		this.addr = addr;
	}
	/**
	 * 全部数据的构造，包括了对象字段
	 * @param id Integer 序号ID   
	 * @param areaid Integer 地区   
	 * @param cname String 名称   
	 * @param addr String 地址   
	* @param notuse String 没用
	 */
	public Hospital(Integer id ,Integer areaid ,String cname ,String addr ,String notuse,Object notuse2) {
		super();
		this.id = id;
		this.areaid = areaid;
		this.cname = cname;
		this.addr = addr;
	}

	/**我的中文名称*/
	private String myname;
	/**我的中文名称*/
	@Transient
	
	//@JSONField(serialize = false)
	public String getMyname() {
		myname=(myname==null)?""+cname+" ":myname;
		return myname;
	}
	/**我的中文名称*/
	public void setMyname(String myname) {
		this.myname = myname;
	}
	/**我的带id中文名称*/
	private String mynameid;
	/**我的带id中文名称*/
	@Transient
	
	//@JSONField(serialize = false)
	public String getMynameid() {
		mynameid=(mynameid==null)?"["+id+"]"+cname+" ":mynameid;
		return mynameid;
	}
	/**我的带id中文名称*/
	public void setMynameid(String mynameid) {
		this.mynameid = mynameid;
	}
	/**设置主键*/
	public void setId(Integer value) {
		this.id = value;
	}
	/**获取主键*/
	

	@Id @GeneratedValue(generator="custom-id")
	@GenericGenerator(name="custom-id", strategy = "identity")
	@Column(name = "id",  unique = false, nullable = false, insertable = true, updatable = true, length = 11)
	public Integer getId() {
		return this.id;
	}
	
	/**获取地区  */
	

	@Column(name = "areaid", unique = false, nullable = true, insertable = true, updatable = true, length = 11)
	public Integer getAreaid() {
		return this.areaid;
	}
	/**设置地区  */

	public void setAreaid(Integer value) {
		this.areaid = value;
	}
	/**获取名称  */
	

	@Column(name = "cname", unique = false, nullable = true, insertable = true, updatable = true, length = 100)
	public String getCname() {
		return this.cname;
	}
	/**设置名称  */

	public void setCname(String value) {
		this.cname = value;
	}
	/**获取地址  */
	

	@Column(name = "addr", unique = false, nullable = true, insertable = true, updatable = true, length = 100)
	public String getAddr() {
		return this.addr;
	}
	/**设置地址  */

	public void setAddr(String value) {
		this.addr = value;
	}
	/**地区String*/
	private String areaidString;
	/**获取地区String*/
	@Transient
	
	public String getAreaidString() {
		return areaidString;
	}
	/**设置地区String*/
	public void setAreaidString(String value) {
		this.areaidString=value;
	}

	/**
	 * 清空ONE MANY对象，用于WS,JSON等场景
	 */
	public void makeNullObj(){
		this.obj1=null;
		this.obj2=null;
		this.obj3=null;
		this.obj4=null;
		this.obj5=null;
	}
	/**
	 * 非常严格的检查对象，不能空不能0
	 * @param checkId 是否检查id
	 * @return
	 */
	public boolean errCheckObjHard(boolean checkId){
		if (errCheckObj(checkId))
			return true;
		if(checkId){
			if(0==this.id)
				return true;
		}
		return false;
	}
	/**
	 * 较松的的检查对象，不能空，可以是0
	 * @param checkId 是否检查id
	 * @return
	 */
	public boolean errCheckObj(boolean checkId){
		if(checkId){
			if(this.id==null)
				return true;
		}
		return false;
	}
	/**备用对象1*/
	private Object obj1;
	/**
	 * 获取备用对象1
	 * @return Object
	 */
	@Transient
	
	public Object getObj1() {
		return obj1;
	}
	/**
	 * 设置备用对象1
	 * @param obj1
	 */
	public void setObj1(Object obj1) {
		this.obj1 = obj1;
	}
	/**备用对象2*/
	private Object obj2;
	/**
	 * 获取备用对象2
	 * @return Object
	 */
	@Transient
	
	public Object getObj2() {
		return obj2;
	}
	/**
	 * 设置备用对象2
	 * @param obj2
	 */
	public void setObj2(Object obj2) {
		this.obj2 = obj2;
	}
	/**备用对象3*/
	private Object obj3;
	/**
	 * 获取备用对象3
	 * @return Object
	 */
	@Transient
	
	public Object getObj3() {
		return obj3;
	}
	/**
	 * 设置备用对象3
	 * @param obj3
	 */
	public void setObj3(Object obj3) {
		this.obj3 = obj3;
	}
	/**备用对象4*/
	private Object obj4;
	/**
	 * 获取备用对象4
	 * @return Object
	 */
	@Transient
	
	public Object getObj4() {
		return obj4;
	}
	/**
	 * 设置备用对象4
	 * @param obj4
	 */
	public void setObj4(Object obj4) {
		this.obj4 = obj4;
	}
	/**备用对象5*/
	private Object obj5;
	/**
	 * 获取备用对象5
	 * @return Object
	 */
	@Transient
	
	public Object getObj5() {
		return obj5;
	}
	/**
	 * 设置备用对象5
	 * @param obj5
	 */
	public void setObj5(Object obj5) {
		this.obj5 = obj5;
	}
	/**
	 * Hash，同所有字段相加判断
	 */
	public int hashCode() {
		if(getId()==null)
		return new HashCodeBuilder()
			.append(getId())
			.append(getAreaid())
			.append(getCname())
			.append(getAddr())
			.toHashCode();
		return new HashCodeBuilder()
			.append(getId())
			.toHashCode();
	}
	/**
	 * 重写，对象是否相同，用ID来判断
	 */
	public boolean equals(Object obj) {
		if(obj instanceof Hospital == false) return false;
		if(this == obj) return true;
		Hospital other = (Hospital)obj;
		return new EqualsBuilder()
			.append(getId(),other.getId())
			.isEquals();
	}
	/**
	 * 转文本
	 */
	@Override
	public String toString() {
		return new ToStringBuilder(this,ToStringStyle.SHORT_PREFIX_STYLE)
			.append(super.toString())
			.append(",Id:",getId())
			.append(",Areaid:",getAreaid())
			.append(",Cname:",getCname())
			.append(",Addr:",getAddr())
			.toString();

	}
	/**
	 * 返回JSON之不显示第0级，对于一些不能传递的对象，不进行json编码，比如password明文，用得较少。
	 * @return
	 */
	public String toJsonNotshow(){
		String[] excludesProperties={"null"};
		String ret=JsonUtilAli.toJSONString(this, null, excludesProperties);
		return ret;
	}
	/**
	 * 返回JSON之不显示第1级，nowshow+notshow1('notshow1'+xxxObj+xxxString+xxxList)
	 * <br>在内部服务通讯时，防止get页面参数过大，通常设置为notshow1，返回时可以是notshow或notshow1
	 * @return
	 */
	public String toJsonNotshow1(){
		String[] excludesProperties={"myname","mynameid","areaidString","obj1","obj2","obj3","obj4","obj5","null"};
		String ret=JsonUtilAli.toJSONString(this, null, excludesProperties);
		return ret;
	}
	/**
	 * 返回JSON之不显示第2级，nowshow+notshow1+notshow2，用于外部服务通讯，符合对方的api要求
	 * @return
	 */
	public String toJsonNotshow2(){
		String[] excludesProperties={"myname","mynameid","areaidString","obj1","obj2","obj3","obj4","obj5","null"};
		String ret=JsonUtilAli.toJSONString(this, null, excludesProperties);
		return ret;
	}

/*
//精简构造 医院
Hospital hospital = new Hospital(
	areaid , //Integer 地区   
	cname , //String 名称   
	addr , //String 地址   
	null
);
*/
}
