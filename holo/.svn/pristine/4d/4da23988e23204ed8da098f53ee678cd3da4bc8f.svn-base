/*
 * zmax 
 * 
 */


package com.zmax.yijian.biz.service.my;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

import com.zmax.entity.*;
import com.zmax.exception.*;
import com.zmax.utils.clazz.ClassUtils;
import com.zmax.utils.easyui.EasyUiUtils;
import com.zmax.utils.easyui.Grid;
import com.zmax.utils.easyui.Tree;
import com.zmax.utils.page.PageHelper;
import com.zmax.utils.string.JsonUtil;
import com.zmax.utils.string.StringUtilz;
import com.zmax.conf.AttrStatic;

import com.zmax.yijian.biz.service.base.BaseService;
import com.zmax.yijian.biz.service.common.*;
import com.zmax.yijian.biz.service.spec.SpecService;
import com.zmax.yijian.common.dal.bean.*;

/**
 * 
 * @author zmax
 * @version 1.0
 * @since 
 */
@Service
public class ProductchannelService extends BaseService<Productchannel> {
	/**日志实例*/
	private static final Logger logger = Logger.getLogger(ProductchannelService.class);
	@Autowired
	CommonzSvrUitls commonzSvrUitls;
	@Autowired
	CommonzSvrUitlsSpec commonzSvrUitlsSpec;
	@Autowired
	SpecService specService;

	/**
	 * 创建时的保存
	 * @param sessionUser 
	 * @param oldobj 旧对象，创建时通常是个空对象
	 * @param obj 新对象，也就是需要保存的对象
	 * @param copyfrom 从哪个表复制对象
	 * @param copyfromwhere 复制的条件
	 * @param needBefore 是否需要做写表前操作
	 * @param needAfter 是否需要写表后操作
	 * @throws Exception
	 */
	public void saveCreate(User sessionUser,Productchannel oldobj,Productchannel obj,String copyfrom,String copyfromwhere,boolean needBefore,boolean needAfter) throws BoException,Exception{
		//用于做复制新增的检查
		if(StringUtils.isNotBlank(copyfrom)&&StringUtils.isNotBlank(copyfromwhere)){
			Object objsrc=specService.getFirst(copyfrom, copyfromwhere, null);
			commonzSvrUitlsSpec.obj2objcheck(sessionUser,objsrc, obj ,copyfrom ,"Productchannel");
		}		
		if(needBefore){
			//创建_写表前操作之通用
			commonzSvrUitls.createBefore(oldobj,obj,"Productchannel",sessionUser);
			//创建_写表前操作之本地
			createAndUpdateBefore(sessionUser,"create",oldobj, obj);
			//创建_写表前操作之自定义，目的是修改obj
			commonzSvrUitlsSpec.createAndUpdateBefore("create",oldobj, obj,sessionUser);
		}
		save(obj);
		//TODO:lang
		if(needAfter){
			//创建_写表后操作之本地
			createAndUpdateAfter(sessionUser,"create",obj,new Productchannel());
			//创建_写表后操作之自定义
			commonzSvrUitlsSpec.createAndUpdateAfter("create",obj,new Productchannel(),sessionUser);
		}
	}
	/**
	 * 更新
	 * 流程：从DB取出DB对象，对提交对象进行修正，将修正对象复制到DB对象，保存
	 * @param sessionUser 
	 * @param obj
	 * @param id 这个id通常是从session中获取的
	 * @param needBefore
	 * @param needAfter
	 * @throws Exception
	 */
	public void updateUpdate(User sessionUser,Productchannel obj,Integer id,boolean needBefore,boolean needAfter) throws BoException,Exception{
		//数据库表里取出的对象，要把页面对象obj里的内容，放进来进行保存
		Productchannel dbobj=get(sessionUser, id);
		if(dbobj==null)
			throw new BoException("数据库中数据找不到");
		if(needBefore){
			//更新_写表前操作之通用，目的是修改obj
			commonzSvrUitls.updateBefore(dbobj,obj,"Productchannel",sessionUser);
			//更新_写表前操作之本地，目的是修改obj
			createAndUpdateBefore(sessionUser,"update",dbobj, obj);
			//更新_写表前操作之自定义，目的是修改obj
			commonzSvrUitlsSpec.createAndUpdateBefore("update", dbobj, obj, sessionUser);
		}
		//父id是否相同
		boolean isSameParentid=(dbobj.getParentid().equals(obj.getParentid()));
		//复制一下老数据库对象，给createAndUpdateAfter用
		Productchannel olddbobj=new Productchannel();
		ClassUtils.beanDeepCopy(dbobj, olddbobj);
		//把页面传进来的对象obj复制到数据库里产生的对象dbobj,之后保存数据库产生的对象dbobj
		ClassUtils.beanDeepCopy(obj, dbobj);
		update(sessionUser,dbobj);
		if(needAfter){
			//更新_写表后操作之本地
			createAndUpdateAfter(sessionUser,"update",dbobj,olddbobj);
			//更新_写表后操作之自定义
			commonzSvrUitlsSpec.createAndUpdateAfter("update",dbobj,olddbobj,sessionUser);
		}
		if(!isSameParentid)
			upateMyfamilyChild(dbobj);
	}

	/**
	 * 根据IDS批量更新某些数据
	 * @param sessionUser 
	 * @param ids
	 * @param setfield
	 * @param needBefore
	 * @param needAfter
	 * @throws Exception
	 */
	public void updateBatchByIds(User sessionUser,String[] ids,String setfield,boolean needBefore,boolean needAfter) throws BoException,Exception{
		String hql= "update Productchannel set "+setfield +" where "+StringUtilz.whereIn(ids);
		executeHql(sessionUser, hql, null);
		if(needAfter)
			commonzSvrUitlsSpec.batchupdateAfter(sessionUser,"Productchannel", setfield, ids);
	}
	/**
	 * 根据ID删除一个
	 * @param sessionUser 
	 * @param id
	 * @param needBefore
	 * @param needAfter
	 * @throws Exception
	 */
	public void deleteOneById(User sessionUser,Integer id,boolean needBefore,boolean needAfter) throws BoException,Exception{
		if(needBefore)
			commonzSvrUitlsSpec.deleteByIdBefore(sessionUser,"Productchannel", id);
		deleteById(sessionUser,id);
		if(needAfter)
			commonzSvrUitlsSpec.deleteByIdAfter(sessionUser,"Productchannel", id);
		//TODO:lang
	}
	/**
	 * 根据IDs删除批量
	 * @param sessionUser 
	 * @param ids
	 * @param needBefore
	 * @param needAfter
	 * @throws Exception
	 */
	public void deleteBatch(User sessionUser,String[] ids,boolean needBefore,boolean needAfter) throws BoException,Exception{
		
		for (String string : ids) {
			Integer id=Integer.valueOf(string);
			if(needBefore)
				commonzSvrUitlsSpec.deleteByIdBefore(sessionUser,"Productchannel", id);
			deleteById(sessionUser,id);
			if(needAfter)
				commonzSvrUitlsSpec.deleteByIdAfter(sessionUser,"Productchannel", id);
		}
	}
	/**
	 * 首页
	 * @param sessionUser 
	 * @param obj 在index时会传一个新对象进来，用于添加搜索条件用的列表
	 * @param needBefore
	 * @param needAfter
	 * @param act 更多的操作 "nullCreate"=如果是空列表创建一个新对象
	 */
	public void csindex(User sessionUser,Productchannel obj,boolean needBefore,boolean needAfter,String act) throws BoException,Exception{
		if(StringUtils.equals(act, "nullCreate")){
			if(obj==null)
				throw new Exception("无法创建空对象");
			Productchannel dbobj=get(sessionUser, obj.getId());
			if(dbobj==null){
				//创建_写表前操作之自定义，目的是修改obj
				commonzSvrUitlsSpec.createAndUpdateBefore("create",new Productchannel(), obj,sessionUser);
				save(obj);
			}
		}
		if(needAfter){
			indexAfter(sessionUser,obj); //给搜索用
		}
	}
	/**
	 * 表格
	 * @param sessionUser 
	 * @param search
	 * @param ph
	 * @param queryhq
	 * @param needBefore
	 * @param needAfter
	 * @return
	 */
	public Grid csgrid(User sessionUser,Productchannel search, PageHelper ph,String queryhq,boolean needBefore,boolean needAfter) throws BoException,Exception{
		String order=(ph.realSort()+" "+ph.getOrder()).trim();
		List<Object> params = new ArrayList<Object>();
		if(needBefore)
			gridBefore(sessionUser,search);
		String searchwhere=commonzSvrUitlsSpec.makeWhere(sessionUser,search, queryhq, params);
		String where=StringUtilz.whereAdd(searchwhere, queryhq);
		Grid page = listPagedQuery(sessionUser, where, order, ph.getPage(), ph.getRows(), params.toArray());
		page.setObj1(queryhq);
		if(needAfter)
			gridAfter(sessionUser,page.getRows());	
		
		return page;
	}
	/**
	 * 详情
	 * @param sessionUser 
	 * @param id
	 * @param needBefore
	 * @param needAfter
	 * @return
	 */
	public Productchannel csshow(User sessionUser,Integer id,boolean needBefore,boolean needAfter) throws BoException,Exception{
		Productchannel productchannel=get(sessionUser, id);
		if(needAfter)
			showAfter(sessionUser,productchannel);
		return (productchannel==null)?new Productchannel():productchannel;
	}
	/**
	 * 新建GET
	 * @param sessionUser 
	 * @param productchannel 初始用户
	 * @param copyfrom 从其它表复制的表名
	 * @param copyfromwhere 从其它表复制的条件
	 * @param needBefore
	 * @param needAfter
	 * @return
	 */
	public Productchannel csnewget(User sessionUser,Productchannel productchannel,String copyfrom,String copyfromwhere,boolean needBefore,boolean needAfter) throws BoException,Exception{
		if(productchannel==null)
			productchannel=new Productchannel();
		//如果是从其它表复制过来的
		if(StringUtils.isNotBlank(copyfrom)&&StringUtils.isNotBlank(copyfromwhere)){
			Object objsrc=specService.getFirst(copyfrom, copyfromwhere, null);
			commonzSvrUitlsSpec.obj2obj(sessionUser,objsrc, productchannel,copyfrom ,"Productchannel");
			productchannel.setId(null);
		}
		if(needBefore)
			commonzSvrUitlsSpec.newgetBefore(sessionUser,productchannel);
		if(needAfter)
			newgetAfter(sessionUser,productchannel);
		return productchannel;
	}
	/**
	 * 修改时的请求
	 * @param sessionUser 
	 * @param id
	 * @param needBefore
	 * @param needAfter
	 * @return
	 * @throws Exception
	 */
	public Productchannel csedit(User sessionUser,Integer id,boolean needBefore,boolean needAfter) throws BoException,Exception{
		
		Productchannel productchannel=get(sessionUser, id);
		if(productchannel==null){
			throw new Exception("数据找不到");
		}
			
		if(needBefore)
			commonzSvrUitlsSpec.editBefore(sessionUser,productchannel);
		if(needAfter)
			editAfter(sessionUser,productchannel);
		return productchannel;
	}
	/**
	 * 获取数据表格树状TREE版
	 * @param sessionUser 
	 * @param search
	 * @param ph
	 * @param queryhq
	 * @param needBefore
	 * @param needAfter
	 * @return
	 * @throws Exception
	 */
	public List<Tree> cstree(User sessionUser,Productchannel search, PageHelper ph,String queryhq,boolean needBefore,boolean needAfter) throws BoException,Exception{
		
		List<Object> params = new ArrayList<Object>();
		if(needBefore)
			gridBefore(sessionUser,search);
		String searchwhere=commonzSvrUitlsSpec.makeWhere(sessionUser,search, queryhq, params);
		String where=StringUtilz.whereAdd(searchwhere, queryhq);
		List<Tree> listTreeOra=new ArrayList<Tree>();
		Integer id=0;
		if(search!=null && search.getId()!=null)
			id=search.getId();
		if(id.intValue()==0)
			listTreeOra.add(new Tree("0", AttrStatic.treerootname, null, false, null, null, "", "0"));	
		where=StringUtilz.whereAdd(where,"parentid="+id);
		List<Productchannel> listProductchannel=listfind(sessionUser, null, where, null, null);
		if(needAfter)
			gridAfter(sessionUser,listProductchannel);
		for (Productchannel productchannel : listProductchannel) {
			Tree tree=new Tree(""+productchannel.getId(), productchannel.getMyname(), "closed", false, null, null, "", ""+productchannel.getParentid());
			listTreeOra.add(tree);
		}
		List<Tree> listTree=EasyUiUtils.treeSort(listTreeOra);
		return listTree;

	}
	
	/**
	 * 获取数据表格treegrid
	 * @param sessionUser 
	 * @param search
	 * @param ph
	 * @param queryhq
	 * @param id
	 * @param needBefore
	 * @param needAfter
	 * @return
	 * @throws Exception
	 */
	public Object cstreegrid(User sessionUser,Productchannel search, PageHelper ph,String queryhq,Integer id,boolean needBefore,boolean needAfter) throws BoException,Exception{
		if(id==null)
			id=0;
		String order=(ph.getSort()+" "+ph.getOrder()).trim();
		List<Object> params = new ArrayList<Object>();
		if(needBefore)
			gridBefore(sessionUser,search);
		String searchwhere=commonzSvrUitlsSpec.makeWhere(sessionUser,search, queryhq, params);
		String where=StringUtilz.whereAdd(searchwhere, queryhq);
		where=StringUtilz.whereAdd(where,"parentid="+id);
		if(id.equals(0)){
			Grid page = listPagedQuery(sessionUser, where, order, ph.getPage(), ph.getRows(), params.toArray());
			if(needAfter)
				gridAfter(sessionUser,page.getRows());
			return page;
		}else{
			List list=listfindWithWhereOrder(sessionUser, where, order, params.toArray());
			if(needAfter)
				gridAfter(sessionUser,list);
			return list;
		}
	}
	/**
	 * 计算我的family
	 * @param me
	 * @throws BoException
	 * @throws Exception
	 */
	public void familyMe(Productchannel me) throws BoException,Exception{
		Productchannel parent=get(null, me.getParentid());
		if(StringUtilz.integerNullOr0(me.getParentid()) || parent==null){ //顶级的
			me.setParentid(0);
			me.setFamily("");
		}else{
			if(StringUtils.isBlank(parent.getFamily()))
				me.setFamily(""+parent.getId());
			else
				me.setFamily(parent.getFamily()+","+parent.getId());
		}	
	}
	/**
	 * 计算我的孩子的family
	 * @param me
	 * @param list 最终返回的，需要保存的集合
	 * @throws BoException
	 * @throws Exception
	 */
	public void familyChild(Productchannel me,List<Productchannel> list) throws BoException,Exception{
		if(list==null)
			throw new Exception("传入的list不能为空");
		familyMe(me);
		list.add(me);
		//孩子
		List<Productchannel> listchild=listfind(null, null, "parentId=?", null, new Object[]{me.getId()});
		for (Productchannel child : listchild) {
			familyChild(child,list);
		}
	}
	/**
	 * 更新我所有的孩子的family
	 * @param me
	 * @throws BoException
	 * @throws Exception
	 */
	public void upateMyfamilyChild(Productchannel me) throws BoException,Exception{
		List<Productchannel> list=new ArrayList<Productchannel>();
		familyChild(me, list);
		if(list.size()>0)
			saveOrUpdateAll(list);
	}
	/**
	 * 整表重算family
	 * @throws BoException
	 * @throws Exception
	 */
	public void updateFamilyAll() throws BoException,Exception{
		List<Productchannel> list=listfind(null, null, "parentId=0", null, null);
		for (Productchannel child : list) {
			upateMyfamilyChild(child);
		}
	}

	////////下面是系列补充与检查

	/**
	 * 创建更新，写表前，如计算总价之类，通常都是一样的操作
	 * @param sessionUser
	 * @param simb
	 * @param dbobj update更新时是数据库里取出的老对象，create创建时是个new Object()
	 * @param obj 主要目的是修改这个对象
	 * @throws BoException
	 * @throws Exception
	 */
	public void createAndUpdateBefore(User sessionUser,String simb,Productchannel dbobj,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		//create update 共用
		familyMe(obj);
		//create 独有
		if("create".equals(simb)){
		}
		//update 独有
		if("update".equals(simb)){
			
		}
	}	
	/**
	 * 创建更新，有可能要改变其它表，或本表的其它数据，通常都是一样的操作
	 * @param sessionUser
	 * @param simb
	 * @param obj 已经db保存过的对象
	 * @param olddbobj update更新时是复制过的数据库老对象，create创建时是个new Object()
	 * @throws BoException
	 * @throws Exception
	 */
	public void createAndUpdateAfter(User sessionUser,String simb,Productchannel obj,Productchannel olddbobj) throws BoException,Exception{
		if(obj==null)return;
		//树形表更新父亲孩子数量
		int num=0;
		if(null!=obj.getParentid() && obj.getParentid().intValue()>0){
			Productchannel newparent=get(sessionUser,obj.getParentid());
			num=getTableCount(sessionUser, null, "parentid=?", null, new Object[]{obj.getParentid()});
			newparent.setChildrennum(num);
			update(sessionUser, newparent);
		}
		//create 独有
		if("create".equals(simb)){
		}
		//update 独有
		if("update".equals(simb)){
		}
	}	


	/**
	 * 获取index，创建新对象后，返回页面之前
	 * @param obj
	 */
	public void indexAfter(User sessionUser,Productchannel obj) throws BoException,Exception{
		addList(sessionUser,obj); //给搜索用
		commonzSvrUitlsSpec.indexAfter(sessionUser,obj);
	}	
	/**
	 * 列表，读库前
	 * @param obj
	 */
	public void gridBefore(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		commonzSvrUitlsSpec.gridBefore(sessionUser,obj);

	}	
	/**
	 * 列表，读库后
	 * @param list
	 */
	public void gridAfter(User sessionUser,List<Productchannel> list) throws BoException,Exception{
		if(list==null||list.size()==0) return;
		for (int i = 0; i < list.size(); i++) {
			gridOneAfter(sessionUser,list.get(i));	
		}
		commonzSvrUitlsSpec.gridAfter(sessionUser,list);
	}
	/**
	 * 列表中的单项，读库后
	 * @param obj
	 */
	public void gridOneAfter(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		addString(sessionUser,obj);	
		addTreeStatus(obj);
	}	
	/**
	 * show，读库后
	 * @param obj
	 */
	public void showAfter(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		addObj(sessionUser,obj);
		addString(sessionUser,obj);
		commonzSvrUitlsSpec.show(sessionUser,obj);
	}
	/**
	 * newGet，对象产生之后，返回页面之前，可能还会在对象中放一些允许用户修改的，从其它表复制过来的数据，目的是为了方便用户
	 * @param obj
	 * @throws Exception
	 */
	public void newgetAfter(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		 //这里不要查session
		addList(sessionUser,obj);
		addString(sessionUser,obj);
		commonzSvrUitlsSpec.newgetAfter(sessionUser,obj);
	}	
	/**
	 * Edit Get，获取对象之后，返回页面之前
	 * @param obj
	 */
	public void editAfter(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		addList(sessionUser,obj);
		addString(sessionUser,obj);	
		commonzSvrUitlsSpec.editAfter(sessionUser,obj);
	}
	
	////////下面是各类补充
	/**
	 * 加上各类对象
	 * @param sessionUser
	 * @param obj
	 * @throws BoException
	 * @throws Exception
	 */
	public void addObj(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		 //这里不要查session
		commonzSvrUitlsSpec.addObj(sessionUser,obj);		
	}

	/**
	 * 给对象加上list,map，用于radio选择，combox搜索
	 * @param sessionUser
	 * @param obj
	 * @throws BoException
	 * @throws Exception
	 */
	public void addList(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		 //这里不要查session
		obj.setStatusValidOrNotMap((Map)IsoInstance.getInstance().getMap("all.StatusValidOrNot"));
		commonzSvrUitlsSpec.addList(sessionUser,obj);
	}

	/**
	 * 加文本
	 * @param sessionUser
	 * @param obj
	 * @throws BoException
	 * @throws Exception
	 */
	public void addString(User sessionUser,Productchannel obj) throws BoException,Exception{
		if(obj==null)return;
		 //这里不要查session
		String value="";
		value=(String)IsoInstance.getInstance().getMapString("all.StatusValidOrNot", ""+obj.getStatusValidOrNot());
		if(StringUtils.isEmpty(value))
			value=""+obj.getStatusValidOrNot();
		obj.setStatusValidOrNotString(value);
		if(obj.getParentid()==null || obj.getParentid()==0)
			obj.setParentidString("根目录");
		else{
			Productchannel obj3=get(sessionUser,obj.getParentid());
			if(obj3!=null){
				obj.setParentidString(obj3.getMyname());
				obj.setParentidStringid(obj3.getMynameid());
			}
		}
		commonzSvrUitlsSpec.addString(sessionUser,obj);
	}
	/**
	 * 增加树状态
	 * @param obj
	 */
	public void addTreeStatus(Productchannel obj) throws BoException,Exception{
		if(StringUtilz.integerNullOr0(obj.getChildrennum())){
			obj.setChildren(null);
			obj.setState(null);
		}
	}
	/**
	 * 返回所有项目的树形列表，注意这个会读全表，如果数据量大不要使用
	 * @param addprent boolean  是否加父，在json中，加了父就会死循环
	 * @return
	 */
	public List<Productchannel> listWithTree(boolean addprent) throws BoException,Exception{
		QueryHelper queryHelper=new QueryHelper(); 
		queryHelper.setOrder("priority");
		commonzSvrUitlsSpec.makeWhereForListWithTree(null, "Productchannel", queryHelper);
		List<Productchannel> listAll=listfind(null, null, queryHelper.getWhere(), queryHelper.getOrder(), null);
		gridAfter(null, listAll);
		List<Productchannel> listTree=new ArrayList<Productchannel>();
		//找到顶级
		for (Productchannel obj : listAll) {
			if(StringUtilz.integerNullOr0(obj.getParentid())){
				listTree.add(obj);
			}
		}
		//给所有对象加孩子列表
		for (Productchannel obj : listTree) {
			putChildren(obj, listAll,addprent);
		}
		return listTree;
	}
	/**
	 * 返回指定parentid下的所有项目的树形列表，注意这个可能会读全表，如果数据量大不要使用
	 * @param pid 父母id
	 * @param addprent boolean  是否加父，在json中，加了父就会死循环
	 * @return
	 */
	public List<Productchannel> listWithTreeByPid(Integer pid,boolean addprent) throws BoException,Exception{
		if(pid==null)
			return new ArrayList<Productchannel>();
		QueryHelper queryHelper=new QueryHelper(); 
		queryHelper.setOrder("priority");
		commonzSvrUitlsSpec.makeWhereForListWithTree(null, "Productchannel", queryHelper);
		List<Productchannel> listAll=listfind(null, null, queryHelper.getWhere(), queryHelper.getOrder(), null);
		gridAfter(null, listAll);
		List<Productchannel> listTree=new ArrayList<Productchannel>();
		//找到顶级
		for (Productchannel obj : listAll) {
			if(pid.equals(obj.getParentid())){
				listTree.add(obj);
			}
		}
		//给所有对象加孩子列表
		for (Productchannel obj : listTree) {
			putChildren(obj, listAll,addprent);
		}
		return listTree;
	}

	/**
	 * 给对象加孩子列表
	 * @param obj
	 * @param listAll
	 * @param addprent boolean
	 */
	private void putChildren(Productchannel obj,List<Productchannel> listAll,boolean addprent) throws BoException,Exception{
		obj.setChildren(new ArrayList<Productchannel>());
		for (Productchannel objc : listAll) {
			if(objc.getParentid()!=null && objc.getParentid().equals(obj.getId())){
				if(addprent)objc.setParent(obj);
				obj.getChildren().add(objc);
				putChildren(objc, listAll,addprent);
			}
		}
		obj.setChildrennum(obj.getChildren().size());
	}
	/**
	 * 从列表以及孩子中找到对象
	 * @param list
	 * @param id
	 * @return
	 */
	public Productchannel takeObjFromListAll(List<Productchannel> list,Integer id) throws BoException,Exception{
		Productchannel ret=null;
		if(list==null)
			return ret;
		for (Productchannel obj : list) {
			if(obj.getId()!=null && obj.getId().equals(id)){
				return obj;
			}
			ret=takeObjFromListAll(obj.getChildren(), id);
			if(ret!=null)
				return ret;
		}
		return null;
	}
}
