/*
 * zmax 
 * 
 */

package com.zmax.yijian.web.controller.restful.spec;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.zmax.conf.AttrStatic;
import com.zmax.exception.BoException;
import com.zmax.exception.NeedLoginException;
import com.zmax.exception.RightException;
import com.zmax.utils.easyui.Json;
import com.zmax.utils.string.Md5PwdEncoder;
import com.zmax.utils.string.StringUtilz;
import com.zmax.yijian.biz.service.my.CartService;
import com.zmax.yijian.biz.service.my.UserService;
import com.zmax.yijian.biz.service.spec.SpecRelationService;
import com.zmax.yijian.biz.service.spec.SpecSmsService;
import com.zmax.yijian.biz.service.spec.SpecWxService;
import com.zmax.yijian.common.dal.bean.User;
import com.zmax.yijian.common.dal.bean.Wxouser;
import com.zmax.yijian.common.utils.AESUtil;
import com.zmax.yijian.web.controller.restful.RestSpecUtils;
import com.zmax.yijian.web.controller.restful.RestUtils;
import com.zmax.yijian.web.controller.restful.entity.ClientInfo;
import com.zmax.yijian.web.controller.spec.pub.SpecPubController;

/**
 * RestFul控制 
 * 自定义功能
 * 
 *
 */
@Controller
@RequestMapping("/rest")
public class SpecRestController {
	/** 日志实例 */
	private static final Logger logger = Logger.getLogger(SpecRestController.class);

	@Autowired
	UserService userService;

	@Autowired
	RestUtils restUtils;
	@Autowired
	RestSpecUtils restSpecUtils;

	@Autowired
	SpecPubController specPubController;
	@Autowired
	SpecWxService specWxService;
	@Autowired
	SpecSmsService specSmsService;
	@Autowired
	SpecRelationService specRelationService;
	/**
	 * 用户请求验证码
	 * @param request
	 * @param mobile 手机号
	 * @throws Exception 
	 */
	@RequestMapping(value = "/requestCode", method = RequestMethod.GET)
	@ResponseBody
	public void requestCode(HttpServletRequest request, String mobile) throws BoException, Exception {
		specSmsService.requestCode(mobile);
	}

	/**
	 * 允许登录的角色
	 * @param userform 页面提交用户
	 * @param userdb 数据库用户
	 * @return
	 */
	private boolean canLogin(User userform,User userdb){
		if(userform==null || userdb==null)
			return false;
		if(userform.getRoleId()==null || userdb.getRoleId()==null)
			return false;
		if(userform.getRoleId().intValue()==userdb.getRoleId().intValue()){
			if(userform.getRoleId().intValue()==AttrStatic.ROLE_MEMBER 
					|| userform.getRoleId().intValue()==AttrStatic.ROLE_DOCTOR
					)
				return true;
		}			
		return false;
	}
	/**
	 * 允许注册的角色
	 * @param userform 页面提交用户
	 * @return
	 */
	private boolean canReg(User userform){
		if(userform==null)
			return false;
		if(userform.getRoleId()==null)
			return false;
		if(userform.getRoleId().intValue()==AttrStatic.ROLE_MEMBER 
				//|| userform.getRoleId().intValue()==AttrStatic.ROLE_DOCTOR
				)
			return true;
		return false;
	}
	
	
	/**
	 * 会员通过账号+密码+角色方式进行登录的检查
	 * @param request
	 * @param response
	 * @param model
	 * @param clientInfo
	 * @param user  必须项包括：username password roleid
	 * @param isauto 1自动登录，这时候传来的密码是md5后的 0非自动登录
	 * @param iscreate 如果空用户是否创建，0不创建(检查时检查账密)，1如果空创建用户,不空返回用户(检查时只查账号即可)，2如果空创建用户,不空则抛错(检查时只查账号即可) 
	 * @param nowURL
	 * @return
	 * @throws BoException
	 * @throws NeedLoginException
	 * @throws RightException
	 * @throws Exception
	 */
	@RequestMapping(value = "/dologin", method = RequestMethod.GET)
	@ResponseBody
	public User dologin(HttpServletRequest request,HttpServletResponse response,ModelMap model,ClientInfo clientInfo,User user,Integer isauto,Integer iscreate,String nowURL)throws BoException, NeedLoginException, RightException, Exception{
		if(user==null){
			
			throw new BoException("账密为空");
		}
		//必须项包括：username password roleid
		if(StringUtils.isBlank(user.getUsername())
				||StringUtils.isBlank(user.getPassword())
				||null==user.getRoleId()
				){
			throw new BoException("账密为空");
		}
		//返回的jr.obj=ret,ret.put("user",dbuser);
		Map<String,Object> ret=checklogin(request, response, model, clientInfo, user, isauto, iscreate);
		if(ret==null){
			logger.debug("12");
			throw new BoException("账号密码错误!");
		}
		User retuser=(User)(ret.get("user"));
		if(retuser==null){
			throw new BoException("账号密码错误!!");
		}
		//检查下角色是否允许登录
		if(!canLogin(user, retuser)){
			throw new BoException("账号密码错误!!!");
		}
		//放下Token
		putToken(retuser);
		return retuser;
	}
	/**
	 * 会员通过短信验证登录，如果用户不存在，则注册一个，密码如果是空则为111111
	 * @param request
	 * @param response
	 * @param model
	 * @param clientInfo
	 * @param user User 必须：username手机号,roleId角色;非必须：password
	 * @param code 验证码
	 * @param isauto
	 * @param nowURL
	 * @param password
	 * @return
	 * @throws BoException
	 * @throws NeedLoginException
	 * @throws RightException
	 * @throws Exception
	 */
	@RequestMapping(value = "/dologinbysms", method = RequestMethod.GET)
	@ResponseBody
	public User dologinbysms(HttpServletRequest request,HttpServletResponse response,ModelMap model,ClientInfo clientInfo,User user,String code,Integer isauto,String nowURL)throws BoException, NeedLoginException, RightException, Exception{
		if(user==null){
			throw new BoException("手机号为空!");
		}
		//必须项包括：username roleid
		if(StringUtils.isBlank(user.getUsername())
				||null==user.getRoleId()
				){
			throw new BoException("手机号为空!!");
		}	
		//检查下角色是否允许登录
		if(!canLogin(user,user)){
			throw new BoException("用户不允许使用此方式登录!!!");
		}
		specSmsService.checkCode(user.getUsername(), code);
		
		if(StringUtils.isBlank(user.getNickname()))
			user.setNickname(user.getUsername());
		user.setOpenid(clientInfo.getOpenid());
		user.setStatus(1);

		//返回的jr.obj=ret,ret.put("user",dbuser);
		Map<String,Object> ret=checklogin(request, response, model, clientInfo, user, isauto,1);
		if(ret==null){
			throw new BoException("账号密码错误");
		}
		User retuser=(User)(ret.get("user"));
		if(retuser==null||(retuser.getRoleId().intValue()!=AttrStatic.ROLE_MEMBER && retuser.getRoleId().intValue()!=AttrStatic.ROLE_DOCTOR)){
			throw new BoException("账号密码错误");
		}
		//注册后创建医患关系
		specRelationService.member1sDoctorReg(retuser);
		//放下Token
		putToken(retuser);
		return retuser;
	}
	/**
	 * 重置密码为111111
	 * @param request
	 * @param response
	 * @param model
	 * @param clientInfo
	 * @param mobile
	 * @param code
	 * @param isauto
	 * @param nowURL
	 * @return
	 * @throws BoException
	 * @throws NeedLoginException
	 * @throws RightException
	 * @throws Exception
	 */
	@RequestMapping(value = "/resetPwd", method = RequestMethod.GET)
	@ResponseBody
	public User resetPwd(HttpServletRequest request,HttpServletResponse response,ModelMap model,ClientInfo clientInfo,String mobile,String code,Integer isauto,String nowURL)throws BoException, NeedLoginException, RightException, Exception{
		specSmsService.checkCode(mobile, code);
		String defultPwd="111111";//数据库存的是Md5PwdEncoder.encodePassword(defultPwd)
		String defaultPwdMd5=Md5PwdEncoder.encodePassword(defultPwd);
		User user=new User(
				1, //Integer 状态 default=0  {'0':'正在申请','1':'有效','-1':'申请被拒','-2':'删除'}
				5, //Integer 角色 default=0 这里如果改变，权限表也要变化 {'0':'超管','1':'一般管理员','4':'企业会员','5':'个人会员','6':'水站'}
				mobile, //String 账号  唯一值 
				defultPwd, //String 密码   
				mobile, //String 昵称   
				null, //Integer 隶属于   
				clientInfo.getOpenid() , //String 微信openid   
				null
				);
		//返回的jr.obj=ret,ret.put("user",dbuser);
		Map<String,Object> ret=checklogin(request, response, model, clientInfo, user, isauto, 0);
		if(ret==null){
			throw new BoException("账号密码错误");
		}
		User retuser=(User)(ret.get("user"));
		retuser.setPassword(defaultPwdMd5);
		userService.executeHql(null, "update User set password=? where username=?", new Object[]{mobile,defaultPwdMd5});
		if(retuser==null||(retuser.getRoleId().intValue()!=AttrStatic.ROLE_MEMBER && retuser.getRoleId().intValue()!=AttrStatic.ROLE_DOCTOR)){
			throw new BoException("账号密码错误");
		}
		//放下Token
		putToken(retuser);
		return retuser;
	}
	/**
	 * 登录检查，根据来源执行不同函数：账密检查 or 账号检查
	 * @param request
	 * @param response
	 * @param model
	 * @param clientInfo
	 * @param user
	 * @param isauto
	 * @param iscreate 如果空用户是否创建，0不创建(检查时检查账密)，1如果空创建用户,不空返回用户(检查时只查账号即可)，2如果空创建用户,不空则抛错(检查时只查账号即可) 
	 * @return
	 */
	private Map<String,Object> checklogin(HttpServletRequest request,HttpServletResponse response,ModelMap model,ClientInfo clientInfo,User user,Integer isauto,Integer iscreate)throws BoException, NeedLoginException, RightException, Exception{
		if(user==null){
			throw new BoException("账密为空");
		}
		logger.info("登录：user="+user.getUsername()+",clientInfo="+clientInfo.toString()+",isauto="+isauto);
		//clientInfo放到obj1，后面有可能会用到
		//user.setObj1(clientInfo);
		//账密验证
		Json jr=null;
		if(StringUtilz.integerNullOr0(iscreate)){
			jr=specPubController.loginCheck(request, response, model,user,isauto,true);	
		}else if(iscreate.intValue()==1){
			jr=specPubController.loginCheckCreateUserMember(request, response, model, user, isauto, true);
		}else{
			jr=specPubController.regCreateUserMember(request, response, model, user, isauto, true);			
		}

		if(!jr.isSuccess()){
			logger.debug("!jr.isSuccess()="+jr.getMsg());
			throw new BoException(jr.getMsg());
		}	
		//返回的jr.obj=ret,ret.put("user",dbuser);
		Map<String,Object> ret=(Map<String,Object>)jr.getObj();
		if(ret==null){
			throw new BoException("登录失败");
		}
		User userRet=(User)(ret.get("user"));
		//如果带了微信OPENID，更新绑定关系，更新wxouser，更新user...
		if(userRet!=null && clientInfo!=null)
			specWxService.updateOpenidUserIdBind(userRet.getId(), clientInfo.getOpenid(),userRet.getRoleId());
		return ret;
	}

	/**
	 * 登录后,放下Token
	 * @param user
	 * @return
	 */
	public boolean putToken(User user){
		//个人或商户放token
		if(Integer.valueOf(AttrStatic.ROLE_MEMBER).equals(user.getRoleId()) ||
				Integer.valueOf(AttrStatic.ROLE_DOCTOR).equals(user.getRoleId())){
			user.setToken(AESUtil.getInstance().encryptUser(user));
		}
		return true;
	}
}
