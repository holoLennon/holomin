/*
 * zmax 
 * 
 */


//  
package com.zmax.yijian.common.dal.bean;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.annotations.*;
import javax.validation.constraints.*;
import org.hibernate.validator.constraints.*;
import javax.persistence.Entity;
import com.zmax.utils.string.JsonUtilAli;

import org.apache.commons.lang.builder.*;
import java.text.*;
import java.util.*;
import com.zmax.yijian.common.dal.bean.base.BaseEntity;
 
import org.springframework.format.annotation.DateTimeFormat;


/**
 * 专题
 * @author zmax
 * @version 1.0
 * @since 
 */

@Entity
@Table(name = "topic")
@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)//可读可写
public class Topic extends BaseEntity{
	
	//alias
	public static final String TABLE_ALIAS = "专题";

	//date formats
	public static final String FORMAT_GMT_CREATE = DATE_FORMAT;
	
	//columns START
	/**序号ID Integer   */
	@Max(99999999999L)
	
	private Integer id;
	/**创建时间 Date   */
	
	@DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss")
	private Date gmtCreate;
	/**状态 Integer default=0  */
	@Max(999L)
	
	private Integer statusValidOrNot = 0;
	/**标题 String   */
	@Length(max=100)
	
	private String title;
	/**图1 String  600x600 */
	@Length(max=200)
	
	private String img1;
	/**文1 String   */
	@Length(max=1000)
	
	private String txt1;
	/**图2 String  600x600 */
	@Length(max=200)
	
	private String img2;
	/**文2 String   */
	@Length(max=1000)
	
	private String txt2;
	/**图3 String  600x600 */
	@Length(max=200)
	
	private String img3;
	/**文3 String   */
	@Length(max=1000)
	
	private String txt3;
	/**图4 String  600x600 */
	@Length(max=200)
	
	private String img4;
	/**文4 String   */
	@Length(max=1000)
	
	private String txt4;
	/**图5 String  600x600 */
	@Length(max=200)
	
	private String img5;
	/**文5 String   */
	@Length(max=1000)
	
	private String txt5;
	/**产品列表*/
	private List<TopicProduct> listTopicProduct;
	//columns END
	/**
	 * 设置默认值
	 * @param _this
	 */
	public void makedefault(Topic _this){
		_this.gmtCreate=new Date();
		_this.statusValidOrNot=0;
	}
	public Topic(){
		makedefault(this);
	}
	public Topic(Integer _id){
		this.id=_id;
		makedefault(this);
	}
	/**
	 * 精简版构造，在创建提交数据库时应该使用saveCreate
	 * @param statusValidOrNot Integer 状态 default=0  
	 * @param title String 标题   
	 * @param img1 String 图1  600x600 
	 * @param txt1 String 文1   
	 * @param img2 String 图2  600x600 
	 * @param txt2 String 文2   
	 * @param img3 String 图3  600x600 
	 * @param txt3 String 文3   
	 * @param img4 String 图4  600x600 
	 * @param txt4 String 文4   
	 * @param img5 String 图5  600x600 
	 * @param txt5 String 文5   
	* @param notuse String 没用
	 */
	public Topic(Integer statusValidOrNot ,String title ,String img1 ,String txt1 ,String img2 ,String txt2 ,String img3 ,String txt3 ,String img4 ,String txt4 ,String img5 ,String txt5 ,String notuse) {
		super();
		this.statusValidOrNot = statusValidOrNot;
		this.title = title;
		this.img1 = img1;
		this.txt1 = txt1;
		this.img2 = img2;
		this.txt2 = txt2;
		this.img3 = img3;
		this.txt3 = txt3;
		this.img4 = img4;
		this.txt4 = txt4;
		this.img5 = img5;
		this.txt5 = txt5;
	}
	/**
	 * 不包括自动变量的构造
	 * @param id Integer 序号ID   
	 * @param statusValidOrNot Integer 状态 default=0  
	 * @param title String 标题   
	 * @param img1 String 图1  600x600 
	 * @param txt1 String 文1   
	 * @param img2 String 图2  600x600 
	 * @param txt2 String 文2   
	 * @param img3 String 图3  600x600 
	 * @param txt3 String 文3   
	 * @param img4 String 图4  600x600 
	 * @param txt4 String 文4   
	 * @param img5 String 图5  600x600 
	 * @param txt5 String 文5   
	* @param notuse String 没用
	 */
	public Topic(Integer id ,Integer statusValidOrNot ,String title ,String img1 ,String txt1 ,String img2 ,String txt2 ,String img3 ,String txt3 ,String img4 ,String txt4 ,String img5 ,String txt5 ,String notuse) {
		super();
		this.id = id;
		this.gmtCreate = new Date();
		this.statusValidOrNot = statusValidOrNot;
		this.title = title;
		this.img1 = img1;
		this.txt1 = txt1;
		this.img2 = img2;
		this.txt2 = txt2;
		this.img3 = img3;
		this.txt3 = txt3;
		this.img4 = img4;
		this.txt4 = txt4;
		this.img5 = img5;
		this.txt5 = txt5;
	}
	/**
	 * 全部数据的构造，包括了对象字段
	 * @param id Integer 序号ID   
	 * @param gmtCreate Date 创建时间   
	 * @param statusValidOrNot Integer 状态 default=0  
	 * @param title String 标题   
	 * @param img1 String 图1  600x600 
	 * @param txt1 String 文1   
	 * @param img2 String 图2  600x600 
	 * @param txt2 String 文2   
	 * @param img3 String 图3  600x600 
	 * @param txt3 String 文3   
	 * @param img4 String 图4  600x600 
	 * @param txt4 String 文4   
	 * @param img5 String 图5  600x600 
	 * @param txt5 String 文5   
	 * @param listTopicProduct String 产品列表   
	* @param notuse String 没用
	 */
	public Topic(Integer id ,Date gmtCreate ,Integer statusValidOrNot ,String title ,String img1 ,String txt1 ,String img2 ,String txt2 ,String img3 ,String txt3 ,String img4 ,String txt4 ,String img5 ,String txt5 ,List<TopicProduct> listTopicProduct ,String notuse,Object notuse2) {
		super();
		this.id = id;
		this.gmtCreate = gmtCreate;
		this.statusValidOrNot = statusValidOrNot;
		this.title = title;
		this.img1 = img1;
		this.txt1 = txt1;
		this.img2 = img2;
		this.txt2 = txt2;
		this.img3 = img3;
		this.txt3 = txt3;
		this.img4 = img4;
		this.txt4 = txt4;
		this.img5 = img5;
		this.txt5 = txt5;
		this.listTopicProduct = listTopicProduct;
	}

	/**我的中文名称*/
	private String myname;
	/**我的中文名称*/
	@Transient
	
	//@JSONField(serialize = false)
	public String getMyname() {
		myname=(myname==null)?"":myname;
		return myname;
	}
	/**我的中文名称*/
	public void setMyname(String myname) {
		this.myname = myname;
	}
	/**我的带id中文名称*/
	private String mynameid;
	/**我的带id中文名称*/
	@Transient
	
	//@JSONField(serialize = false)
	public String getMynameid() {
		mynameid=(mynameid==null)?"["+id+"]":mynameid;
		return mynameid;
	}
	/**我的带id中文名称*/
	public void setMynameid(String mynameid) {
		this.mynameid = mynameid;
	}
	/**设置主键*/
	public void setId(Integer value) {
		this.id = value;
	}
	/**获取主键*/
	

	@Id @GeneratedValue(generator="custom-id")
	@GenericGenerator(name="custom-id", strategy = "identity")
	@Column(name = "id",  unique = false, nullable = false, insertable = true, updatable = true, length = 11)
	public Integer getId() {
		return this.id;
	}
	
	/**获取创建时间  */
	

	@Column(name = "gmt_create", unique = false, nullable = true, insertable = true, updatable = true, length = 20)
	public Date getGmtCreate() {
		return this.gmtCreate;
	}
	/**设置创建时间  */

	public void setGmtCreate(Date value) {
		this.gmtCreate = value;
	}
	/**获取状态  */
	

	@Column(name = "status_valid_or_not", unique = false, nullable = true, insertable = true, updatable = true, length = 3)
	public Integer getStatusValidOrNot() {
		return this.statusValidOrNot;
	}
	/**设置状态  */

	public void setStatusValidOrNot(Integer value) {
		this.statusValidOrNot = value;
	}
	/**获取标题  */
	

	@Column(name = "title", unique = false, nullable = true, insertable = true, updatable = true, length = 100)
	public String getTitle() {
		return this.title;
	}
	/**设置标题  */

	public void setTitle(String value) {
		this.title = value;
	}
	/**获取图1 600x600 */
	

	@Column(name = "img1", unique = false, nullable = true, insertable = true, updatable = true, length = 200)
	public String getImg1() {
		return this.img1;
	}
	/**设置图1 600x600 */

	public void setImg1(String value) {
		this.img1 = value;
	}
	/**获取文1  */
	

	@Column(name = "txt1", unique = false, nullable = true, insertable = true, updatable = true, length = 1000)
	public String getTxt1() {
		return this.txt1;
	}
	/**设置文1  */

	public void setTxt1(String value) {
		this.txt1 = value;
	}
	/**获取图2 600x600 */
	

	@Column(name = "img2", unique = false, nullable = true, insertable = true, updatable = true, length = 200)
	public String getImg2() {
		return this.img2;
	}
	/**设置图2 600x600 */

	public void setImg2(String value) {
		this.img2 = value;
	}
	/**获取文2  */
	

	@Column(name = "txt2", unique = false, nullable = true, insertable = true, updatable = true, length = 1000)
	public String getTxt2() {
		return this.txt2;
	}
	/**设置文2  */

	public void setTxt2(String value) {
		this.txt2 = value;
	}
	/**获取图3 600x600 */
	

	@Column(name = "img3", unique = false, nullable = true, insertable = true, updatable = true, length = 200)
	public String getImg3() {
		return this.img3;
	}
	/**设置图3 600x600 */

	public void setImg3(String value) {
		this.img3 = value;
	}
	/**获取文3  */
	

	@Column(name = "txt3", unique = false, nullable = true, insertable = true, updatable = true, length = 1000)
	public String getTxt3() {
		return this.txt3;
	}
	/**设置文3  */

	public void setTxt3(String value) {
		this.txt3 = value;
	}
	/**获取图4 600x600 */
	

	@Column(name = "img4", unique = false, nullable = true, insertable = true, updatable = true, length = 200)
	public String getImg4() {
		return this.img4;
	}
	/**设置图4 600x600 */

	public void setImg4(String value) {
		this.img4 = value;
	}
	/**获取文4  */
	

	@Column(name = "txt4", unique = false, nullable = true, insertable = true, updatable = true, length = 1000)
	public String getTxt4() {
		return this.txt4;
	}
	/**设置文4  */

	public void setTxt4(String value) {
		this.txt4 = value;
	}
	/**获取图5 600x600 */
	

	@Column(name = "img5", unique = false, nullable = true, insertable = true, updatable = true, length = 200)
	public String getImg5() {
		return this.img5;
	}
	/**设置图5 600x600 */

	public void setImg5(String value) {
		this.img5 = value;
	}
	/**获取文5  */
	

	@Column(name = "txt5", unique = false, nullable = true, insertable = true, updatable = true, length = 1000)
	public String getTxt5() {
		return this.txt5;
	}
	/**设置文5  */

	public void setTxt5(String value) {
		this.txt5 = value;
	}
	/**对象 获取产品列表  */
	@Transient
	

	public List<TopicProduct> getListTopicProduct() {
		return this.listTopicProduct;
	}
	/**设置产品列表  */

	public void setListTopicProduct(List<TopicProduct> value) {
		this.listTopicProduct = value;
	}
	/**创建时间String*/
	private String gmtCreateString;
	/**获取创建时间String*/
	@Transient
	
	public String getGmtCreateString() {
		if(gmtCreateString==null && gmtCreate!=null)
			gmtCreateString=new SimpleDateFormat(DATE_FORMAT).format(gmtCreate);
		return gmtCreateString;
	}
	/**设置创建时间String*/
	public void setGmtCreateString(String value) {
		this.gmtCreateString=value;
	}
	/**状态String*/
	private String statusValidOrNotString;
	/**获取状态String*/
	@Transient
	
	public String getStatusValidOrNotString() {
		return statusValidOrNotString;
	}
	/**设置状态String*/
	public void setStatusValidOrNotString(String value) {
		this.statusValidOrNotString=value;
	}
	/**状态Map*/
	private Map<String, Object> statusValidOrNotMap;
	/**获取状态Map*/
	@Transient
	
	public Map<String, Object> getStatusValidOrNotMap() {
		return statusValidOrNotMap;
	}
	/**设置状态Map*/
	public void setStatusValidOrNotMap(Map<String, Object> value) {
		this.statusValidOrNotMap=value;
	}

	/**
	 * 清空ONE MANY对象，用于WS,JSON等场景
	 */
	public void makeNullObj(){
		this.obj1=null;
		this.obj2=null;
		this.obj3=null;
		this.obj4=null;
		this.obj5=null;
		this.statusValidOrNotMap=null;
	}
	/**
	 * 非常严格的检查对象，不能空不能0
	 * @param checkId 是否检查id
	 * @return
	 */
	public boolean errCheckObjHard(boolean checkId){
		if (errCheckObj(checkId))
			return true;
		if(checkId){
			if(0==this.id)
				return true;
		}
		return false;
	}
	/**
	 * 较松的的检查对象，不能空，可以是0
	 * @param checkId 是否检查id
	 * @return
	 */
	public boolean errCheckObj(boolean checkId){
		if(checkId){
			if(this.id==null)
				return true;
		}
		return false;
	}
	/**备用对象1*/
	private Object obj1;
	/**
	 * 获取备用对象1
	 * @return Object
	 */
	@Transient
	
	public Object getObj1() {
		return obj1;
	}
	/**
	 * 设置备用对象1
	 * @param obj1
	 */
	public void setObj1(Object obj1) {
		this.obj1 = obj1;
	}
	/**备用对象2*/
	private Object obj2;
	/**
	 * 获取备用对象2
	 * @return Object
	 */
	@Transient
	
	public Object getObj2() {
		return obj2;
	}
	/**
	 * 设置备用对象2
	 * @param obj2
	 */
	public void setObj2(Object obj2) {
		this.obj2 = obj2;
	}
	/**备用对象3*/
	private Object obj3;
	/**
	 * 获取备用对象3
	 * @return Object
	 */
	@Transient
	
	public Object getObj3() {
		return obj3;
	}
	/**
	 * 设置备用对象3
	 * @param obj3
	 */
	public void setObj3(Object obj3) {
		this.obj3 = obj3;
	}
	/**备用对象4*/
	private Object obj4;
	/**
	 * 获取备用对象4
	 * @return Object
	 */
	@Transient
	
	public Object getObj4() {
		return obj4;
	}
	/**
	 * 设置备用对象4
	 * @param obj4
	 */
	public void setObj4(Object obj4) {
		this.obj4 = obj4;
	}
	/**备用对象5*/
	private Object obj5;
	/**
	 * 获取备用对象5
	 * @return Object
	 */
	@Transient
	
	public Object getObj5() {
		return obj5;
	}
	/**
	 * 设置备用对象5
	 * @param obj5
	 */
	public void setObj5(Object obj5) {
		this.obj5 = obj5;
	}
	/**
	 * Hash，同所有字段相加判断
	 */
	public int hashCode() {
		if(getId()==null)
		return new HashCodeBuilder()
			.append(getId())
			.append(getGmtCreate())
			.append(getStatusValidOrNot())
			.append(getTitle())
			.append(getImg1())
			.append(getTxt1())
			.append(getImg2())
			.append(getTxt2())
			.append(getImg3())
			.append(getTxt3())
			.append(getImg4())
			.append(getTxt4())
			.append(getImg5())
			.append(getTxt5())
			.toHashCode();
		return new HashCodeBuilder()
			.append(getId())
			.toHashCode();
	}
	/**
	 * 重写，对象是否相同，用ID来判断
	 */
	public boolean equals(Object obj) {
		if(obj instanceof Topic == false) return false;
		if(this == obj) return true;
		Topic other = (Topic)obj;
		return new EqualsBuilder()
			.append(getId(),other.getId())
			.isEquals();
	}
	/**
	 * 转文本
	 */
	@Override
	public String toString() {
		return new ToStringBuilder(this,ToStringStyle.SHORT_PREFIX_STYLE)
			.append(super.toString())
			.append(",Id:",getId())
			.append(",GmtCreate:",getGmtCreate())
			.append(",StatusValidOrNot:",getStatusValidOrNot())
			.append(",Title:",getTitle())
			.append(",Img1:",getImg1())
			.append(",Txt1:",getTxt1())
			.append(",Img2:",getImg2())
			.append(",Txt2:",getTxt2())
			.append(",Img3:",getImg3())
			.append(",Txt3:",getTxt3())
			.append(",Img4:",getImg4())
			.append(",Txt4:",getTxt4())
			.append(",Img5:",getImg5())
			.append(",Txt5:",getTxt5())
			.toString();

	}
	/**
	 * 返回JSON之不显示第0级，对于一些不能传递的对象，不进行json编码，比如password明文，用得较少。
	 * @return
	 */
	public String toJsonNotshow(){
		String[] excludesProperties={"null"};
		String ret=JsonUtilAli.toJSONString(this, null, excludesProperties);
		return ret;
	}
	/**
	 * 返回JSON之不显示第1级，nowshow+notshow1('notshow1'+xxxObj+xxxString+xxxList)
	 * <br>在内部服务通讯时，防止get页面参数过大，通常设置为notshow1，返回时可以是notshow或notshow1
	 * @return
	 */
	public String toJsonNotshow1(){
		String[] excludesProperties={"myname","mynameid","gmtCreateString","statusValidOrNotString","statusValidOrNotMap","obj1","obj2","obj3","obj4","obj5","null"};
		String ret=JsonUtilAli.toJSONString(this, null, excludesProperties);
		return ret;
	}
	/**
	 * 返回JSON之不显示第2级，nowshow+notshow1+notshow2，用于外部服务通讯，符合对方的api要求
	 * @return
	 */
	public String toJsonNotshow2(){
		String[] excludesProperties={"myname","mynameid","gmtCreateString","statusValidOrNotString","statusValidOrNotMap","obj1","obj2","obj3","obj4","obj5","null"};
		String ret=JsonUtilAli.toJSONString(this, null, excludesProperties);
		return ret;
	}

/*
//精简构造 专题
Topic topic = new Topic(
	statusValidOrNot , //Integer 状态 default=0  
	title , //String 标题   
	img1 , //String 图1  600x600 
	txt1 , //String 文1   
	img2 , //String 图2  600x600 
	txt2 , //String 文2   
	img3 , //String 图3  600x600 
	txt3 , //String 文3   
	img4 , //String 图4  600x600 
	txt4 , //String 文4   
	img5 , //String 图5  600x600 
	txt5 , //String 文5   
	null
);
*/
}
